import sys
import os
import pickle  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
from datetime import datetime
from openai import OpenAI
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton,
    QLabel, QGraphicsDropShadowEffect, QLineEdit, QScrollArea, QMessageBox, QComboBox,
    QListWidget, QSplitter
)
from PyQt5.QtGui import QFont, QIcon, QColor, QTextCursor, QTextDocument
from PyQt5.QtCore import Qt, QPropertyAnimation, QThread, pyqtSignal, QTimer, QRect
import markdown
from markdown.extensions import codehilite, fenced_code

# –ü—É—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞
API_KEY_FILE = "api_key.txt" 
SESSIONS_FILE = "sessions.pkl"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
SETTINGS_FILE = "settings.pkl"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–∞ –∏–∑ —Ñ–∞–π–ª–∞
def load_api_key():
    if os.path.exists(API_KEY_FILE):
        with open(API_KEY_FILE, "r") as f:
            return f.read().strip()
    return ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞ –≤ —Ñ–∞–π–ª
def save_api_key_to_file(key):
    with open(API_KEY_FILE, "w") as f:
        f.write(key)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –≤ —Ñ–∞–π–ª
def save_sessions_to_file(sessions):
    with open(SESSIONS_FILE, "wb") as f:
        pickle.dump(sessions, f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π –∏–∑ —Ñ–∞–π–ª–∞
def load_sessions_from_file():
    if os.path.exists(SESSIONS_FILE):
        with open(SESSIONS_FILE, "rb") as f:
            return pickle.load(f)
    return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
def save_settings(settings):
    with open(SETTINGS_FILE, "wb") as f:
        pickle.dump(settings, f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def load_settings():
    if os.path.exists(SETTINGS_FILE):
        try:
            with open(SETTINGS_FILE, "rb") as f:
                return pickle.load(f)
        except:
            return {"dark_mode": True}
    return {"dark_mode": True}

class SecondWindow(QWidget):
    def __init__(self):
        super().__init__()
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã
        self.settings = load_settings()
        self.dark_mode = self.settings.get("dark_mode", True)
        
        self.setWindowTitle("NexoraAI - API –∫–ª—é—á")
        self.resize(480, 320)
        self.apply_theme()

        layout = QVBoxLayout()
        layout.setAlignment(Qt.AlignCenter)
        layout.setSpacing(24)
        layout.setContentsMargins(40, 40, 40, 40)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NexoraAI")
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("font-size: 24px; font-weight: 700; margin-bottom: 8px;")
        layout.addWidget(title_label)
        
        subtitle_label = QLabel("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        subtitle_label.setAlignment(Qt.AlignCenter)
        subtitle_label.setStyleSheet("font-size: 14px; margin-bottom: 20px;")
        layout.addWidget(subtitle_label)

        self.api_key_input = QLineEdit()
        self.api_key_input.setPlaceholderText("sk-your-api-key-here...")
        self.api_key_input.setFixedWidth(320)
        self.api_key_input.setEchoMode(QLineEdit.Password)
        layout.addWidget(self.api_key_input, alignment=Qt.AlignHCenter)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å
        show_hide_layout = QHBoxLayout()
        self.show_password_btn = QPushButton("üëÅ")
        self.show_password_btn.setFixedSize(180, 40)
        self.show_password_btn.clicked.connect(self.toggle_password_visibility)
        show_hide_layout.addStretch()
        show_hide_layout.addWidget(self.show_password_btn)
        show_hide_layout.addStretch()
        layout.addLayout(show_hide_layout)

        self.save_button = GlowingButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
        self.save_button.setFixedWidth(250)
        self.save_button.clicked.connect(self.save_api_key)
        layout.addWidget(self.save_button, alignment=Qt.AlignHCenter)

        # –°—Å—ã–ª–∫–∏
        links_layout = QVBoxLayout()
        links_layout.setSpacing(8)
        
        link_label = QLabel('<a href="https://telegra.ph/NexoraAI-05-29" style="text-decoration: none;">üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é API –∫–ª—é—á–∞</a>')
        link_label.setOpenExternalLinks(True)
        link_label.setAlignment(Qt.AlignCenter)
        links_layout.addWidget(link_label)

        agreement_label = QLabel('<a href="https://telegra.ph/NexoraAI-05-29-2" style="text-decoration: none;">üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</a>')
        agreement_label.setOpenExternalLinks(True)
        agreement_label.setAlignment(Qt.AlignCenter)
        links_layout.addWidget(agreement_label)
        
        layout.addLayout(links_layout)

        self.setLayout(layout)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–ª—é—á ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º
        saved_key = load_api_key()
        if saved_key:
            self.api_key_input.setText(saved_key)
    
    def apply_theme(self):
        if self.dark_mode:
            self.setStyleSheet(""" 
                QWidget {
                    background: #0F0F23;
                    color: #FFFFFF;
                    font-family: 'Segoe UI', Arial, sans-serif;
                }
                QLineEdit {
                    background: rgba(255, 255, 255, 0.05);
                    border: 2px solid rgba(255, 255, 255, 0.1);
                    border-radius: 12px;
                    padding: 16px 20px;
                    color: #FFFFFF;
                    font-size: 14px;
                    font-weight: 400;
                }
                QLineEdit:focus {
                    border: 2px solid #6366F1;
                    background: rgba(255, 255, 255, 0.08);
                }
                QLineEdit:hover {
                    background: rgba(255, 255, 255, 0.07);
                }
                QLabel {
                    font-size: 16px;
                    font-weight: 500;
                    margin-bottom: 8px;
                    color: #E5E7EB;
                }
                QPushButton {
                    background: #6366F1;
                    color: #FFFFFF;
                    border: none;
                    border-radius: 12px;
                    padding: 12px 24px;
                    font-size: 14px;
                    font-weight: 600;
                }
                QPushButton:hover {
                    background: #5B5BD6;
                }
                QPushButton:pressed {
                    background: #4F46E5;
                }
            """)
        else:
            self.setStyleSheet(""" 
                QWidget {
                    background: #FAFAFA;
                    color: #1F2937;
                    font-family: 'Segoe UI', Arial, sans-serif;
                }
                QLineEdit {
                    background: rgba(255, 255, 255, 0.9);
                    border: 2px solid rgba(229, 231, 235, 0.8);
                    border-radius: 12px;
                    padding: 16px 20px;
                    color: #1F2937;
                    font-size: 14px;
                    font-weight: 400;
                }
                QLineEdit:focus {
                    border: 2px solid #FBBF24;
                    background: rgba(255, 255, 255, 1);
                }
                QLineEdit:hover {
                    background: rgba(255, 255, 255, 1);
                }
                QLabel {
                    font-size: 16px;
                    font-weight: 500;
                    margin-bottom: 8px;
                    color: #374151;
                }
                QPushButton {
                    background: #FBBF24;
                    color: #1F2937;
                    border: none;
                    border-radius: 12px;
                    padding: 12px 24px;
                    font-size: 14px;
                    font-weight: 600;
                }
                QPushButton:hover {
                    background: #F59E0B;
                }
                QPushButton:pressed {
                    background: #D97706;
                }
            """)
    
    def toggle_password_visibility(self):
        if self.api_key_input.echoMode() == QLineEdit.Password:
            self.api_key_input.setEchoMode(QLineEdit.Normal)
            self.show_password_btn.setText("üôà")
        else:
            self.api_key_input.setEchoMode(QLineEdit.Password)
            self.show_password_btn.setText("üëÅ")
    
    def save_api_key(self):
        api = self.api_key_input.text().strip()
        if not api:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á.")
            return
        client.api_key = api
        save_api_key_to_file(api)
        second_window.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
        window.show()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º API –∫–ª—é—á–æ–º
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=load_api_key(),
)

class ApiWorker(QThread):
    finished = pyqtSignal(str)
    error = pyqtSignal(str)

    def __init__(self, user_text, model_name):
        super().__init__()
        self.user_text = user_text
        self.model_name = model_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å

    def run(self):
        try:
            # Prepare the messages for the API request
            completion = client.chat.completions.create(
                model=self.model_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å
                messages=self.user_text,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            )
            response = completion.choices[0].message.content
            self.finished.emit(response)  # –ü–µ—Ä–µ–¥–∞—ë–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
        except Exception as e:
            self.error.emit(str(e))  # –ü–µ—Ä–µ–¥–∞—á–∞ –æ—à–∏–±–æ–∫

class GlowingButton(QPushButton):
    def __init__(self, text):
        super().__init__(text)
        self.setStyleSheet("""
            QPushButton {
                background: #6366F1;
                color: #FFFFFF;
                border: none;
                border-radius: 12px;
                padding: 12px 20px;
                font-size: 14px;
                font-weight: 600;
            }
            QPushButton:hover {
                background: #5B5BD6;
            }
            QPushButton:pressed {
                background: #4F46E5;
            }
        """)

class CopyButton(QPushButton):
    def __init__(self, text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", dark_mode=True):
        super().__init__(text)
        self.dark_mode = dark_mode
        self.update_theme()
        
    def update_theme(self):
        if self.dark_mode:
            self.setStyleSheet("""
                QPushButton {
                    background: rgba(139, 92, 246, 0.2);
                    border: 1px solid rgba(139, 92, 246, 0.3);
                    border-radius: 8px;
                    font-size: 12px;
                    color: #FFFFFF;
                    padding: 8px 16px;
                    text-align: center;
                    min-width: 80px;
                    min-height: 28px;
                }
                QPushButton:hover {
                    background: rgba(139, 92, 246, 0.3);
                    color: #FFFFFF;
                }
                QPushButton:pressed {
                    background: rgba(139, 92, 246, 0.4);
                    color: #FFFFFF;
                }
            """)
        else:
            self.setStyleSheet("""
                QPushButton {
                    background: rgba(251, 191, 36, 0.2);
                    border: 1px solid rgba(251, 191, 36, 0.4);
                    border-radius: 8px;
                    font-size: 12px;
                    color: #1F2937;
                    padding: 8px 16px;
                    text-align: center;
                    min-width: 80px;
                    min-height: 28px;
                }
                QPushButton:hover {
                    background: rgba(251, 191, 36, 0.3);
                    color: #1F2937;
                }
                QPushButton:pressed {
                    background: rgba(251, 191, 36, 0.4);
                    color: #1F2937;
                }
            """)

class ThemeToggle(QWidget):
    theme_changed = pyqtSignal(bool)  # True for dark, False for light
    
    def __init__(self, is_dark=True):
        super().__init__()
        self.is_dark = is_dark
        self.setFixedSize(60, 30)
        self.setStyleSheet("background: transparent;")
        
    def paintEvent(self, event):
        from PyQt5.QtGui import QPainter, QBrush, QPen
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        
        # –†–∏—Å—É–µ–º —Ñ–æ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
        if self.is_dark:
            bg_color = QColor(99, 102, 241)  # –°–∏–Ω–∏–π –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        else:
            bg_color = QColor(251, 191, 36)  # –ñ–µ–ª—Ç—ã–π –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
            
        painter.setBrush(QBrush(bg_color))
        painter.setPen(QPen(bg_color))
        painter.drawRoundedRect(0, 0, 60, 30, 15, 15)
        
        # –†–∏—Å—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
        circle_color = QColor(255, 255, 255)
        painter.setBrush(QBrush(circle_color))
        painter.setPen(QPen(circle_color))
        
        if self.is_dark:
            painter.drawEllipse(32, 3, 24, 24)  # –°–ø—Ä–∞–≤–∞ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        else:
            painter.drawEllipse(4, 3, 24, 24)   # –°–ª–µ–≤–∞ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
    
    def mousePressEvent(self, event):
        self.is_dark = not self.is_dark
        self.theme_changed.emit(self.is_dark)
        self.update()  # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç

class NexoraAI_Interface(QWidget):
    def __init__(self):
        super().__init__()
        self.model_map = {
            "Deepseek-R1": "deepseek/deepseek-r1:free",
            "Llama-4": "meta-llama/llama-4-scout:free",
            "Gemini-2.0": "google/gemini-2.0-flash-exp:free"
        }
        self.selected_model = self.model_map["Deepseek-R1"]
        self.setWindowTitle("NexoraAI Client")
        self.resize(1200, 750)
        self.chat_history = []  # (—Ä–æ–ª—å, —Ç–µ–∫—Å—Ç, –≤—Ä–µ–º—è)
        self.loading_timer = QTimer()
        self.loading_timer.timeout.connect(self.update_loading_dots)
        self.loading_index = 0
        self.loading_chars = ['‚†Å','‚†Ç','‚†Ñ','‚°Ä','‚¢Ä','‚††','‚†ê','‚†à']
        self.chat_sessions = load_sessions_from_file()
        self.current_session_index = -1
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã
        self.settings = load_settings()
        self.dark_mode = self.settings.get("dark_mode", True)
        
        self.setup_ui()
        self.add_new_session("–ù–æ–≤—ã–π —á–∞—Ç")
        self.chat_sessions = load_sessions_from_file()
        self.load_sessions_into_list()

    def setup_ui(self):
        main_layout = QHBoxLayout()
        main_layout.setSpacing(0)
        main_layout.setContentsMargins(0, 0, 0, 0)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å
        left_panel = QWidget()
        left_layout = QVBoxLayout()
        left_layout.setSpacing(16)
        left_layout.setContentsMargins(24, 24, 24, 24)
        left_panel.setLayout(left_layout)
        left_panel.setFixedWidth(320)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        self.sidebar_title = QLabel("–ß–∞—Ç—ã")
        self.sidebar_title.setStyleSheet("""
            font-size: 18px; 
            font-weight: 700; 
            color: #FFFFFF; 
            margin-bottom: 16px;
        """)
        left_layout.addWidget(self.sidebar_title)

        # –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
        self.new_session_button_left = GlowingButton("+ –ù–æ–≤—ã–π —á–∞—Ç")
        self.new_session_button_left.clicked.connect(self.add_new_session)
        self.new_session_button_left.setFixedHeight(48)
        left_layout.addWidget(self.new_session_button_left)

        # –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
        self.session_list = QListWidget()
        self.session_list.itemClicked.connect(self.on_session_selected)
        left_layout.addWidget(self.session_list, stretch=1)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QVBoxLayout()
        buttons_layout.setSpacing(8)

        self.delete_session_button = GlowingButton("üóë –£–¥–∞–ª–∏—Ç—å —á–∞—Ç")
        self.delete_session_button.clicked.connect(self.delete_current_session)
        buttons_layout.addWidget(self.delete_session_button)

        self.delete_sessions_button = GlowingButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë")
        self.delete_sessions_button.clicked.connect(self.delete_all_sessions)
        buttons_layout.addWidget(self.delete_sessions_button)

        left_layout.addLayout(buttons_layout)

        main_layout.addWidget(left_panel)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
        right_widget = QWidget()
        right_layout = QVBoxLayout()
        right_layout.setSpacing(24)
        right_layout.setContentsMargins(32, 32, 32, 32)
        right_widget.setLayout(right_layout)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        top_layout = QHBoxLayout()
        top_layout.setSpacing(16)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("NexoraAI")
        title_label.setStyleSheet("""
            font-size: 28px; 
            font-weight: 800; 
            color: #6366F1;
        """)
        top_layout.addWidget(title_label)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
        theme_container = QWidget()
        theme_layout = QHBoxLayout()
        theme_layout.setContentsMargins(0, 0, 0, 0)
        theme_layout.setSpacing(8)
        
        self.theme_label = QLabel("üåô" if self.dark_mode else "‚òÄÔ∏è")
        self.theme_label.setStyleSheet("font-size: 16px; color: #9CA3AF;")
        theme_layout.addWidget(self.theme_label)
        
        self.theme_toggle = ThemeToggle(self.dark_mode)
        self.theme_toggle.theme_changed.connect(self.on_theme_changed)
        theme_layout.addWidget(self.theme_toggle)
        
        theme_container.setLayout(theme_layout)
        top_layout.addWidget(theme_container)

        top_layout.addStretch()

        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        model_label = QLabel("ü§ñ –ú–æ–¥–µ–ª—å:")
        model_label.setStyleSheet("font-size: 14px; color: #9CA3AF; font-weight: 500;")
        top_layout.addWidget(model_label)

        self.select_list = QComboBox()
        self.select_list.addItems(["Deepseek-R1", "Llama-4", "Gemini-2.0"])
        self.select_list.currentIndexChanged.connect(self.on_select_change)
        self.select_list.currentIndexChanged.connect(self.on_model_change)
        top_layout.addWidget(self.select_list)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
        self.clear_button = GlowingButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_button.clicked.connect(self.clear_chat)
        top_layout.addWidget(self.clear_button)

        right_layout.addLayout(top_layout)

        # –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.messages_container = QWidget()
        self.messages_layout = QVBoxLayout()
        self.messages_layout.setAlignment(Qt.AlignTop)
        self.messages_layout.setSpacing(16)
        self.messages_layout.setContentsMargins(16, 16, 16, 16)
        self.messages_container.setLayout(self.messages_layout)
        self.scroll_area.setWidget(self.messages_container)
        right_layout.addWidget(self.scroll_area, stretch=1)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        input_container = QWidget()
        input_layout = QHBoxLayout()
        input_layout.setSpacing(12)
        input_layout.setContentsMargins(0, 0, 0, 0)
        input_container.setLayout(input_layout)

        self.input_field = QTextEdit()
        self.input_field.setFixedHeight(60)
        self.input_field.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        self.input_field.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        input_layout.addWidget(self.input_field)

        self.send_button = GlowingButton("‚û§")
        self.send_button.setFixedSize(60, 60)
        self.send_button.clicked.connect(self.handle_send)
        input_layout.addWidget(self.send_button)

        right_layout.addWidget(input_container)

        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π keyPressEvent
        self.original_keyPressEvent = self.input_field.keyPressEvent
        self.input_field.keyPressEvent = self.custom_keyPressEvent

        main_layout.addWidget(right_widget)
        self.setLayout(main_layout)

        self.apply_theme()
        self.input_field.setFocus()

    def apply_theme(self):
        if self.dark_mode:
            # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
            self.setStyleSheet("""
                QWidget {
                    background: #0F0F23;
                    color: #FFFFFF;
                    font-family: 'Segoe UI', Arial, sans-serif;
                }
                
                /* –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π */
                QListWidget {
                    background: transparent;
                    border: none;
                    outline: none;
                    color: #E5E7EB;
                    font-size: 14px;
                }
                QListWidget::item {
                    background: rgba(255, 255, 255, 0.05);
                    border-radius: 12px;
                    padding: 12px 16px;
                    margin-bottom: 8px;
                    border: 1px solid transparent;
                    color: #E5E7EB;
                }
                QListWidget::item:hover {
                    background: rgba(255, 255, 255, 0.08);
                    border: 1px solid rgba(99, 102, 241, 0.3);
                    color: #FFFFFF;
                }
                QListWidget::item:selected {
                    background: rgba(99, 102, 241, 0.2);
                    border: 1px solid #6366F1;
                    color: #FFFFFF;
                }
                
                /* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */
                QScrollArea {
                    background: rgba(255, 255, 255, 0.02);
                    border: 1px solid rgba(255, 255, 255, 0.05);
                    border-radius: 16px;
                }
                
                /* –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ */
                QScrollBar:vertical {
                    background: rgba(255, 255, 255, 0.05);
                    width: 8px;
                    border-radius: 4px;
                    margin: 0;
                }
                QScrollBar::handle:vertical {
                    background: rgba(99, 102, 241, 0.6);
                    border-radius: 4px;
                    min-height: 20px;
                }
                QScrollBar::handle:vertical:hover {
                    background: rgba(99, 102, 241, 0.8);
                }
                QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                    border: none;
                    background: none;
                }
                
                /* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */
                QTextEdit {
                    background: rgba(255, 255, 255, 0.05);
                    border: 2px solid rgba(255, 255, 255, 0.1);
                    border-radius: 16px;
                    padding: 12px 20px;
                    color: #FFFFFF;
                    font-size: 16px;
                    font-weight: 400;
                }
                QTextEdit:focus {
                    border: 2px solid #6366F1;
                    background: rgba(255, 255, 255, 0.08);
                }
                
                /* –ö–Ω–æ–ø–∫–∏ */
                QPushButton {
                    background: #6366F1;
                    color: #FFFFFF;
                    border: none;
                    border-radius: 12px;
                    padding: 12px 20px;
                    font-size: 14px;
                    font-weight: 600;
                }
                QPushButton:hover {
                    background: #5B5BD6;
                }
                QPushButton:pressed {
                    background: #4F46E5;
                }
                
                /* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ */
                QComboBox {
                    background: rgba(255, 255, 255, 0.9);
                    color: #1F2937;
                    border: 1px solid rgba(229, 231, 235, 0.8);
                    border-radius: 8px;
                    padding: 8px 16px;
                    font-size: 14px;
                    min-width: 120px;
                }
                QComboBox:hover {
                    background: rgba(255, 255, 255, 1);
                    border: 1px solid rgba(251, 191, 36, 0.5);
                }
                QComboBox::drop-down {
                    border: none;
                    background: transparent;
                    width: 0px;
                }
                QComboBox::down-arrow {
                    image: none;
                    background: transparent;
                    border: none;
                    width: 0px;
                    height: 0px;
                }
                QComboBox QAbstractItemView {
                    background: #FFFFFF;
                    color: #1F2937;
                    selection-background-color: #FBBF24;
                    border: 1px solid rgba(229, 231, 235, 0.8);
                    border-radius: 8px;
                    padding: 4px;
                }
            """)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
            self.sidebar_title.setStyleSheet("""
                font-size: 18px; 
                font-weight: 700; 
                color: #FFFFFF; 
                margin-bottom: 16px;
            """)
        else:
            # –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
            self.setStyleSheet("""
                QWidget {
                    background: #FAFAFA;
                    color: #1F2937;
                    font-family: 'Segoe UI', Arial, sans-serif;
                }
                
                /* –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π */
                QListWidget {
                    background: transparent;
                    border: none;
                    outline: none;
                    color: #374151;
                    font-size: 14px;
                }
                QListWidget::item {
                    background: rgba(255, 255, 255, 0.8);
                    border-radius: 12px;
                    padding: 12px 16px;
                    margin-bottom: 8px;
                    border: 1px solid rgba(229, 231, 235, 0.8);
                    color: #374151;
                }
                QListWidget::item:hover {
                    background: rgba(249, 250, 251, 1);
                    border: 1px solid rgba(251, 191, 36, 0.5);
                    color: #1F2937;
                }
                QListWidget::item:selected {
                    background: rgba(251, 191, 36, 0.1);
                    border: 1px solid #FBBF24;
                    color: #1F2937;
                }
                
                /* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */
                QScrollArea {
                    background: rgba(255, 255, 255, 0.7);
                    border: 1px solid rgba(229, 231, 235, 0.8);
                    border-radius: 16px;
                }
                
                /* –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ */
                QScrollBar:vertical {
                    background: rgba(229, 231, 235, 0.3);
                    width: 8px;
                    border-radius: 4px;
                    margin: 0;
                }
                QScrollBar::handle:vertical {
                    background: rgba(251, 191, 36, 0.6);
                    border-radius: 4px;
                    min-height: 20px;
                }
                QScrollBar::handle:vertical:hover {
                    background: rgba(251, 191, 36, 0.8);
                }
                QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                    border: none;
                    background: none;
                }
                
                /* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */
                QTextEdit {
                    background: rgba(255, 255, 255, 0.9);
                    border: 2px solid rgba(229, 231, 235, 0.8);
                    border-radius: 16px;
                    padding: 12px 20px;
                    color: #1F2937;
                    font-size: 16px;
                    font-weight: 400;
                }
                QTextEdit:focus {
                    border: 2px solid #FBBF24;
                    background: rgba(255, 255, 255, 1);
                }
                
                /* –ö–Ω–æ–ø–∫–∏ */
                QPushButton {
                    background: #FBBF24;
                    color: #1F2937;
                    border: none;
                    border-radius: 12px;
                    padding: 12px 20px;
                    font-size: 14px;
                    font-weight: 600;
                }
                QPushButton:hover {
                    background: #F59E0B;
                }
                QPushButton:pressed {
                    background: #D97706;
                }
                
                /* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ */
                QComboBox {
                    background: rgba(255, 255, 255, 0.9);
                    color: #1F2937;
                    border: 1px solid rgba(229, 231, 235, 0.8);
                    border-radius: 8px;
                    padding: 8px 16px;
                    font-size: 14px;
                    min-width: 120px;
                }
                QComboBox:hover {
                    background: rgba(255, 255, 255, 1);
                    border: 1px solid rgba(251, 191, 36, 0.5);
                }
                QComboBox::drop-down {
                    border: none;
                    background: transparent;
                    width: 0px;
                }
                QComboBox::down-arrow {
                    image: none;
                    background: transparent;
                    border: none;
                    width: 0px;
                    height: 0px;
                }
                QComboBox QAbstractItemView {
                    background: #FFFFFF;
                    color: #1F2937;
                    selection-background-color: #FBBF24;
                    border: 1px solid rgba(229, 231, 235, 0.8);
                    border-radius: 8px;
                    padding: 4px;
                }
            """)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
            self.sidebar_title.setStyleSheet("""
                font-size: 18px; 
                font-weight: 700; 
                color: #1F2937; 
                margin-bottom: 16px;
            """)
        
        self.style().unpolish(self)
        self.style().polish(self)
        self.update()

    def update_chat_display(self):
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for i in reversed(range(self.messages_layout.count())):
            widget = self.messages_layout.itemAt(i).widget()
            if widget:
                widget.deleteLater()
        
        for item in self.chat_history:
            if item[0] == "user":
                if len(item) == 3:
                    role, text, time_str = item
                else:
                    role, text = item
                    time_str = ""
                    
                message_widget = QWidget()
                if self.dark_mode:
                    message_widget.setStyleSheet("""
                        background: rgba(99, 102, 241, 0.1);
                        border-radius: 20px;
                        border: 1px solid rgba(99, 102, 241, 0.2);
                        padding: 16px;
                        margin: 8px;
                    """)
                    header_color = "#9CA3AF"
                    text_color = "#FFFFFF"
                else:
                    message_widget.setStyleSheet("""
                        background: rgba(251, 191, 36, 0.1);
                        border-radius: 20px;
                        border: 1px solid rgba(251, 191, 36, 0.3);
                        padding: 16px;
                        margin: 8px;
                    """)
                    header_color = "#6B7280"
                    text_color = "#1F2937"
                
                layout = QVBoxLayout()
                layout.setContentsMargins(20, 16, 20, 16)
                
                header = QLabel(f"üë§ –í—ã ‚Ä¢ {time_str}")
                header.setStyleSheet(f"font-size: 12px; color: {header_color}; margin-bottom: 8px; font-weight: 500;")
                layout.addWidget(header)
                
                text_label = QLabel(text)
                text_label.setWordWrap(True)
                text_label.setStyleSheet(f"font-size: 15px; color: {text_color}; line-height: 1.5;")
                layout.addWidget(text_label)
                
                message_widget.setLayout(layout)
                self.messages_layout.addWidget(message_widget)
                
            elif item[0] == "bot":
                if len(item) == 3:
                    role, text, time_str = item
                else:
                    role, text = item[0], item[1]
                    time_str = ""
                    
                message_widget = QWidget()
                if self.dark_mode:
                    message_widget.setStyleSheet("""
                        background: rgba(255, 255, 255, 0.03);
                        border-radius: 20px;
                        border: 1px solid rgba(255, 255, 255, 0.08);
                        padding: 16px;
                        margin: 8px;
                    """)
                    header_color = "#9CA3AF"
                    text_color = "#E5E7EB"
                else:
                    message_widget.setStyleSheet("""
                        background: rgba(255, 255, 255, 0.9);
                        border-radius: 20px;
                        border: 1px solid rgba(229, 231, 235, 0.8);
                        padding: 16px;
                        margin: 8px;
                    """)
                    header_color = "#6B7280"
                    text_color = "#374151"
                
                layout = QVBoxLayout()
                layout.setContentsMargins(20, 16, 20, 16)
                
                header_layout = QHBoxLayout()
                header_label = QLabel(f"ü§ñ NexoraAI ‚Ä¢ {time_str}")
                header_label.setStyleSheet(f"font-size: 12px; color: {header_color}; font-weight: 500;")
                header_layout.addWidget(header_label)
                
                header_layout.addStretch()
                
                copy_button = CopyButton(dark_mode=self.dark_mode)
                copy_button.clicked.connect(lambda checked, t=text: self.copy_text(t))
                header_layout.addWidget(copy_button)
                
                layout.addLayout(header_layout)
                
                html = markdown.markdown(text, extensions=['fenced_code', 'codehilite'])
                text_label = QLabel(html)
                text_label.setWordWrap(True)
                text_label.setTextFormat(Qt.RichText)
                text_label.setStyleSheet(f"""
                    font-size: 15px; 
                    color: {text_color}; 
                    line-height: 1.6;
                    margin-top: 8px;
                """)
                layout.addWidget(text_label)
                
                message_widget.setLayout(layout)
                self.messages_layout.addWidget(message_widget)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        scrollbar = self.scroll_area.verticalScrollBar()
        QTimer.singleShot(50, lambda: scrollbar.setValue(scrollbar.maximum()))

    def copy_text(self, text):
        QApplication.clipboard().setText(text)

    def delete_current_session(self):
        index = self.current_session_index
        if index >= 0 and index < len(self.chat_sessions):
            # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            del self.chat_sessions[index]
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            self.load_sessions_into_list()
            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Å–µ—Å—Å–∏–∏, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∏–ª–∏ —Å–ª–µ–¥—É—é—â—É—é
            if self.chat_sessions:
                self.current_session_index = 0
                self.chat_history = self.chat_sessions[0]
                self.session_list.setCurrentRow(0)
            else:
                # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                self.add_new_session(f"–ß–∞—Ç 1")
            self.update_chat_display()

    def on_select_change(self, index):
        # –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –æ—á–∏—â–∞–µ–º —á–∞—Ç
        self.clear_chat()

    def toggle_theme(self, state):
        self.dark_mode = state  # —Ç—É—Ç –≤–∞–∂–Ω–æ
        self.apply_theme()

    def update_loading_dots(self):
        self.loading_dots_count = (getattr(self, 'loading_dots_count', 0) + 1) % 4
        dots = '.' * self.loading_dots_count
        if self.chat_history and self.chat_history[-1][0] == "bot":
            self.chat_history[-1] = ("bot", f"–ò–ò –¥—É–º–∞–µ—Ç{dots}")
            self.update_chat_display()

    def load_sessions_into_list(self):
        self.session_list.clear()
        for i, session in enumerate(self.chat_sessions):
            display_title = f"–ß–∞—Ç {i + 1}"
            self.session_list.addItem(display_title)
        if self.chat_sessions:
            self.current_session_index = 0
            self.chat_history = self.chat_sessions[0]
            self.session_list.setCurrentRow(0)
            self.update_chat_display()
        else:
            self.current_session_index = -1
            self.chat_history = []

    def closeEvent(self, event):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        save_sessions_to_file(self.chat_sessions)
        event.accept()  # –ü—Ä–∏–Ω—è—Ç—å —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è

    def handle_send(self):
        user_text = self.input_field.toPlainText().strip()
        if not user_text:
            return
        if not client.api_key:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á.")
            return
        timestamp = datetime.now().strftime("%H:%M:%S")

        if self.current_session_index == -1:
            self.add_new_session()

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.chat_sessions[self.current_session_index].append(("user", user_text, timestamp))
        self.chat_sessions[self.current_session_index].append(("bot", "–ò–ò –¥—É–º–∞–µ—Ç..."))
        self.chat_history = self.chat_sessions[self.current_session_index]

        # –ò–∑–≤–ª–µ—á—å –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
        words = user_text.split()
        new_title = " ".join(words[:3]) if len(words) >= 3 else " ".join(words)
        if not new_title.strip():
            new_title = f"–ß–∞—Ç {self.current_session_index + 1}"

        # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ QListWidget
        self.session_list.item(self.current_session_index).setText(new_title)

        self.update_chat_display()
        self.input_field.clear()
        self.send_button.setEnabled(False)
        self.loading_dots_count = 0
        self.loading_timer.start(300)

        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
        self.bot_response_timer = QTimer()
        self.bot_response_timer.timeout.connect(self.update_bot_timer)
        self.bot_response_timer.start(1000)

        messages = []
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
        for role, text, *rest in self.chat_history[:-2]:
            if role == "user":
                messages.append({
                    "role": "user",
                    "content": f"–≠—Ç–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –Ω–µ–≥–æ: {text}"
                })
            elif role == "bot":
                messages.append({
                    "role": "bot",
                    "content": f"–≠—Ç–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –Ω–µ–≥–æ: {text}"
                })

        messages.append({
            "role": "user",
            "content": user_text
        })

        self.worker = ApiWorker(messages, self.selected_model)
        self.worker.finished.connect(self.on_response)
        self.worker.start()
        self.input_field.setFocus()

    def update_bot_timer(self):
        if self.chat_history and self.chat_history[-1][0] == "bot":
            self.chat_history[-1] = ("bot", "–ò–ò –¥—É–º–∞–µ—Ç...")
            self.update_chat_display()

    def on_response(self, response):
        self.loading_timer.stop()
        if hasattr(self, 'bot_response_timer'):
            self.bot_response_timer.stop()
        html_content = markdown.markdown(response)
        timestamp = datetime.now().strftime("%H:%M:%S")
        if self.chat_history and self.chat_history[-1][0] == "bot":
            self.chat_history[-1] = ("bot", html_content, timestamp)
        else:
            self.chat_history.append(("bot", html_content, timestamp))
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        if self.current_session_index >= 0:
            self.chat_sessions[self.current_session_index] = self.chat_history
        self.update_chat_display()
        self.send_button.setEnabled(True)

    def on_model_change(self, index):
        item_text = self.select_list.itemText(index)
        self.selected_model = self.model_map.get(item_text, "deepseek/deepseek-r1:free")
    
    def clear_chat(self):
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
        if self.current_session_index >= 0:
            self.chat_sessions[self.current_session_index].clear()
            self.chat_history = self.chat_sessions[self.current_session_index]
        else:
            self.chat_history.clear()
        self.update_chat_display()

    def custom_keyPressEvent(self, event):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ
        if event.key() in (Qt.Key_Return, Qt.Key_Enter):
            if not (event.modifiers() & Qt.ShiftModifier):
                self.handle_send()
                event.accept()
            else:
                self.original_keyPressEvent(event)
        else:
            self.original_keyPressEvent(event)

    def add_new_session(self, title=None):
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –ø—É—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
        self.chat_sessions.append([])
        self.current_session_index = len(self.chat_sessions) - 1
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
        display_title = title or f"–ß–∞—Ç {self.current_session_index + 1}"
        self.session_list.addItem(display_title)
        self.session_list.setCurrentRow(self.current_session_index)
        self.chat_history = self.chat_sessions[self.current_session_index]
        self.update_chat_display()
    
    def delete_all_sessions(self):
        self.chat_sessions.clear()
        self.current_session_index = -1
        self.chat_history.clear()
        self.session_list.clear()
        self.update_chat_display()
        save_sessions_to_file(self.chat_sessions)  # –ó–∞–ø–∏—Å–∞—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª

    def on_session_selected(self, item):
        index = self.session_list.currentRow()
        if index < 0 or index >= len(self.chat_sessions):
            return
        self.current_session_index = index
        self.chat_history = self.chat_sessions[index]
        self.update_chat_display()

    def on_theme_changed(self, is_dark):
        self.dark_mode = is_dark
        self.settings["dark_mode"] = is_dark
        save_settings(self.settings)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ä—è–¥–æ–º —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º
        self.theme_label.setText("üåô" if is_dark else "‚òÄÔ∏è")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
        self.apply_theme()
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–≤—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        self.update_chat_display()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = NexoraAI_Interface()
    window.setWindowIcon(QIcon('icon.ico'))
    window.hide()
    second_window = SecondWindow()
    second_window.setWindowIcon(QIcon('icon.ico'))
    second_window.show()
    sys.exit(app.exec_())